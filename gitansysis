#!/usr/bin/env python3
# -*- coding:UTF-8 -*-
import datetime, time
import platform
import getopt
import os, sys
import shutil
import subprocess
import json
from multiprocessing import Pool

ON_LINUX = (platform.system() == "Linux")

def getpipeoutput(cmds, quiet = False):
	start = time.time()
	if not quiet and ON_LINUX and os.isatty(1):
		print(">> " + " | ".join(cmds))
		sys.stdout.flush()
	p = subprocess.Popen(cmds[0], stdout = subprocess.PIPE, shell = True)
	processes = [p]
	for x in cmds[1:]:
		p = subprocess.Popen(x, stdin = p.stdout, stdout = subprocess.PIPE, shell = True)
		processes.append(p)
	output = p.communicate()[0].decode('utf-8')
	for p in processes:
		p.wait()
	end = time.time()
	if not quiet:
		if ON_LINUX and os.isatty(1):
			print("\r")
		print("[%.5f] >> %s" % (end - start, " | ".join(cmds)))
	return output.rstrip("\n")

def getlogrange(conf, defaultrange = "HEAD", end_only = True):
	commit_range = getcommitrange(conf, defaultrange, end_only)
	if len(conf["start_date"]) > 0:
		return "--since='%s' '%s'" % (conf["start_date"], commit_range)
	return commit_range

def getcommitrange(conf, defaultrange = "HEAD", end_only = False):
	if len(conf["commit_end"]) > 0:
		if end_only or len(conf["commit_begin"]) == 0:
			return conf["commit_end"]
		return "%s..%s" % (conf["commit_begin"], conf["commit_end"])
	return defaultrange

class GitDataCollector:
	def __init__(self, conf, gitpath):
		self.conf = conf
		self.gitpath = gitpath
		self.authors = {}
		self.total_authors = 0

	def collect(self):
		os.chdir(self.gitpath)
		self.total_authors = int(getpipeoutput(['git shortlog -s %s' % getlogrange(self.conf), 'wc -l']))
		print(self.total_authors)

def usage(conf):
	print("""
Usage: gitansysis [options] <gitpath> <outputpath>

Options:
-c key=value     Override configuration value
-h --help

Default config values:
%s

""" % conf)

def checkparams():
	if not os.path.exists(os.path.join(os.path.dirname(os.path.realpath(sys.argv[0])), "gitansysis.json")):
		print("\nError: config json %s not exist" % os.path.join(os.getcwd(), "gitansysis.json"))
		sys.exit()
	fr = open(os.path.join(os.path.dirname(os.path.realpath(sys.argv[0])), "gitansysis.json"), "r")
	conf = json.load(fr)
	fr.close()

	args_orig = sys.argv[1:]
	try:
		optlist, args = getopt.getopt(args_orig, 'hc:', ["help"])
	except getopt.GetoptError:
		usage(conf)
		sys.exit()
	
	for o, v in optlist:
		if o == '-c':
			key, value = v.split('=', 1)
			if key not in conf:
				print("\nError: no such key %s in config keys" % key)
				usage(conf)
				sys.exit()
			if isinstance(conf[key], int):
				conf[key] = int(value)
			else:
				conf[key] = value
		elif o in ('-h', '--help'):
			usage(conf)
			sys.exit()

	if not len(args) == 2:
		usage(conf)
		sys.exit()

	gitpath = os.path.realpath(args[-2])
	outputpath = os.path.realpath(args[-1])
	if not os.path.exists(gitpath) or not os.path.isdir(gitpath):
		print("\nError: gitpath %s not exist or not a directory" % gitpath)
		sys.exit()
	if not os.path.exists(outputpath):
		os.makedirs(outputpath)
	print(">>>>> gitpath: %s" % gitpath)
	print(">>>>> outputpath: %s" % outputpath)
	return conf, gitpath, outputpath

if __name__=='__main__':
	conf, gitpath, outputpath = checkparams()
	gitdc = GitDataCollector(conf, gitpath)
	gitdc.collect()